// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.

// This is a specialised implementation of a System module loader.

// @ts-nocheck
/* eslint-disable */
let System, __instantiateAsync, __instantiate;

(() => {
  const r = new Map();

  System = {
    register(id, d, f) {
      r.set(id, { d, f, exp: {} });
    },
  };

  async function dI(mid, src) {
    let id = mid.replace(/\.\w+$/i, "");
    if (id.includes("./")) {
      const [o, ...ia] = id.split("/").reverse(),
        [, ...sa] = src.split("/").reverse(),
        oa = [o];
      let s = 0,
        i;
      while ((i = ia.shift())) {
        if (i === "..") s++;
        else if (i === ".") break;
        else oa.push(i);
      }
      if (s < sa.length) oa.push(...sa.slice(s));
      id = oa.reverse().join("/");
    }
    return r.has(id) ? gExpA(id) : import(mid);
  }

  function gC(id, main) {
    return {
      id,
      import: (m) => dI(m, id),
      meta: { url: id, main },
    };
  }

  function gE(exp) {
    return (id, v) => {
      v = typeof id === "string" ? { [id]: v } : id;
      for (const [id, value] of Object.entries(v)) {
        Object.defineProperty(exp, id, {
          value,
          writable: true,
          enumerable: true,
        });
      }
    };
  }

  function rF(main) {
    for (const [id, m] of r.entries()) {
      const { f, exp } = m;
      const { execute: e, setters: s } = f(gE(exp), gC(id, id === main));
      delete m.f;
      m.e = e;
      m.s = s;
    }
  }

  async function gExpA(id) {
    if (!r.has(id)) return;
    const m = r.get(id);
    if (m.s) {
      const { d, e, s } = m;
      delete m.s;
      delete m.e;
      for (let i = 0; i < s.length; i++) s[i](await gExpA(d[i]));
      const r = e();
      if (r) await r;
    }
    return m.exp;
  }

  function gExp(id) {
    if (!r.has(id)) return;
    const m = r.get(id);
    if (m.s) {
      const { d, e, s } = m;
      delete m.s;
      delete m.e;
      for (let i = 0; i < s.length; i++) s[i](gExp(d[i]));
      e();
    }
    return m.exp;
  }

  __instantiateAsync = async (m) => {
    System = __instantiateAsync = __instantiate = undefined;
    rF(m);
    return gExpA(m);
  };

  __instantiate = (m) => {
    System = __instantiateAsync = __instantiate = undefined;
    rF(m);
    return gExp(m);
  };
})();

System.register(
  "https://deno.land/std/fmt/colors",
  [],
  function (exports_1, context_1) {
    "use strict";
    var noColor, enabled;
    var __moduleName = context_1 && context_1.id;
    function setColorEnabled(value) {
      if (noColor) {
        return;
      }
      enabled = value;
    }
    exports_1("setColorEnabled", setColorEnabled);
    function getColorEnabled() {
      return enabled;
    }
    exports_1("getColorEnabled", getColorEnabled);
    function code(open, close) {
      return {
        open: `\x1b[${open.join(";")}m`,
        close: `\x1b[${close}m`,
        regexp: new RegExp(`\\x1b\\[${close}m`, "g"),
      };
    }
    function run(str, code) {
      return enabled
        ? `${code.open}${str.replace(code.regexp, code.open)}${code.close}`
        : str;
    }
    function reset(str) {
      return run(str, code([0], 0));
    }
    exports_1("reset", reset);
    function bold(str) {
      return run(str, code([1], 22));
    }
    exports_1("bold", bold);
    function dim(str) {
      return run(str, code([2], 22));
    }
    exports_1("dim", dim);
    function italic(str) {
      return run(str, code([3], 23));
    }
    exports_1("italic", italic);
    function underline(str) {
      return run(str, code([4], 24));
    }
    exports_1("underline", underline);
    function inverse(str) {
      return run(str, code([7], 27));
    }
    exports_1("inverse", inverse);
    function hidden(str) {
      return run(str, code([8], 28));
    }
    exports_1("hidden", hidden);
    function strikethrough(str) {
      return run(str, code([9], 29));
    }
    exports_1("strikethrough", strikethrough);
    function black(str) {
      return run(str, code([30], 39));
    }
    exports_1("black", black);
    function red(str) {
      return run(str, code([31], 39));
    }
    exports_1("red", red);
    function green(str) {
      return run(str, code([32], 39));
    }
    exports_1("green", green);
    function yellow(str) {
      return run(str, code([33], 39));
    }
    exports_1("yellow", yellow);
    function blue(str) {
      return run(str, code([34], 39));
    }
    exports_1("blue", blue);
    function magenta(str) {
      return run(str, code([35], 39));
    }
    exports_1("magenta", magenta);
    function cyan(str) {
      return run(str, code([36], 39));
    }
    exports_1("cyan", cyan);
    function white(str) {
      return run(str, code([37], 39));
    }
    exports_1("white", white);
    function gray(str) {
      return run(str, code([90], 39));
    }
    exports_1("gray", gray);
    function bgBlack(str) {
      return run(str, code([40], 49));
    }
    exports_1("bgBlack", bgBlack);
    function bgRed(str) {
      return run(str, code([41], 49));
    }
    exports_1("bgRed", bgRed);
    function bgGreen(str) {
      return run(str, code([42], 49));
    }
    exports_1("bgGreen", bgGreen);
    function bgYellow(str) {
      return run(str, code([43], 49));
    }
    exports_1("bgYellow", bgYellow);
    function bgBlue(str) {
      return run(str, code([44], 49));
    }
    exports_1("bgBlue", bgBlue);
    function bgMagenta(str) {
      return run(str, code([45], 49));
    }
    exports_1("bgMagenta", bgMagenta);
    function bgCyan(str) {
      return run(str, code([46], 49));
    }
    exports_1("bgCyan", bgCyan);
    function bgWhite(str) {
      return run(str, code([47], 49));
    }
    exports_1("bgWhite", bgWhite);
    /* Special Color Sequences */
    function clampAndTruncate(n, max = 255, min = 0) {
      return Math.trunc(Math.max(Math.min(n, max), min));
    }
    /** Set text color using paletted 8bit colors.
     * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit */
    function rgb8(str, color) {
      return run(str, code([38, 5, clampAndTruncate(color)], 39));
    }
    exports_1("rgb8", rgb8);
    /** Set background color using paletted 8bit colors.
     * https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit */
    function bgRgb8(str, color) {
      return run(str, code([48, 5, clampAndTruncate(color)], 49));
    }
    exports_1("bgRgb8", bgRgb8);
    /** Set text color using 24bit rgb. */
    function rgb24(str, color) {
      return run(
        str,
        code([
          38,
          2,
          clampAndTruncate(color.r),
          clampAndTruncate(color.g),
          clampAndTruncate(color.b),
        ], 39),
      );
    }
    exports_1("rgb24", rgb24);
    /** Set background color using 24bit rgb. */
    function bgRgb24(str, color) {
      return run(
        str,
        code([
          48,
          2,
          clampAndTruncate(color.r),
          clampAndTruncate(color.g),
          clampAndTruncate(color.b),
        ], 49),
      );
    }
    exports_1("bgRgb24", bgRgb24);
    return {
      setters: [],
      execute: function () {
        // Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
        /**
             * A module to print ANSI terminal colors. Inspired by chalk, kleur, and colors
             * on npm.
             *
             * ```
             * import { bgBlue, red, bold } from "https://deno.land/std/fmt/colors.ts";
             * console.log(bgBlue(red(bold("Hello world!"))));
             * ```
             *
             * This module supports `NO_COLOR` environmental variable disabling any coloring
             * if `NO_COLOR` is set.
             */
        noColor = Deno.noColor;
        enabled = !noColor;
      },
    };
  },
);
System.register(
  "file:///Users/ulises/projects/js/deno-test/fizzBuzz/fizzBuzz",
  ["https://deno.land/std/fmt/colors"],
  function (exports_2, context_2) {
    "use strict";
    var colors_ts_1,
      isDivisibleBy,
      isDivisibleBy3,
      isDivisibleBy5,
      useBold,
      FIZZ,
      BUZZ,
      FIZZ_BUZZ;
    var __moduleName = context_2 && context_2.id;
    function fizzBuzz(num) {
      if (isDivisibleBy3(num) && isDivisibleBy5(num)) {
        return FIZZ_BUZZ;
      }
      if (isDivisibleBy3(num)) {
        return FIZZ;
      }
      if (isDivisibleBy5(num)) {
        return BUZZ;
      }
      return num;
    }
    exports_2("default", fizzBuzz);
    return {
      setters: [
        function (colors_ts_1_1) {
          colors_ts_1 = colors_ts_1_1;
        },
      ],
      execute: function () {
        isDivisibleBy = (x) => (y) => y % x === 0;
        isDivisibleBy3 = isDivisibleBy(3);
        isDivisibleBy5 = isDivisibleBy(5);
        useBold = (color, text) => colors_ts_1.bold(color(text));
        exports_2("FIZZ", FIZZ = useBold(colors_ts_1.magenta, "Fizz"));
        exports_2("BUZZ", BUZZ = useBold(colors_ts_1.cyan, "Buzz"));
        exports_2(
          "FIZZ_BUZZ",
          FIZZ_BUZZ = useBold(colors_ts_1.bgWhite, FIZZ + BUZZ),
        );
      },
    };
  },
);
System.register(
  "file:///Users/ulises/projects/js/deno-test/fizzBuzz/main",
  ["file:///Users/ulises/projects/js/deno-test/fizzBuzz/fizzBuzz"],
  function (exports_3, context_3) {
    "use strict";
    var fizzBuzz_ts_1;
    var __moduleName = context_3 && context_3.id;
    return {
      setters: [
        function (fizzBuzz_ts_1_1) {
          fizzBuzz_ts_1 = fizzBuzz_ts_1_1;
        },
      ],
      execute: function () {
        Array.from({ length: 100 }).forEach((irrelevant, i) => {
          console.log(fizzBuzz_ts_1.default(++i));
        });
      },
    };
  },
);

__instantiate("file:///Users/ulises/projects/js/deno-test/fizzBuzz/main");
